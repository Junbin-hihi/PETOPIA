<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="memberMapper">

	<resultMap type="member" id="memberResultSet">
		<result column="MEMBER_NO" property="memberNo"/>
		<result column="EMAIL" property="email"/>
		<result column="MEMBER_PWD" property="memberPwd"/>
		<result column="NICKNAME" property="nickname"/>
		<result column="MEMBER_NAME" property="memberName"/>
		<result column="BIRTHDAY" property="birthday"/>
		<result column="PHONE" property="phone"/>
		<result column="BANK" property="bank"/>
		<result column="ACCOUNT" property="account"/>
		<result column="ADDRESS" property="address"/>
		<result column="ENROLL_DATE" property="enrollDate"/>
		<result column="MODIFY_DATE" property="modifyDate"/>
		<result column="STATUS" property="status"/>
	
	</resultMap>
	
	<!-- 로그인 용 쿼리문 -->
	<select id="loginMember" parameterType="member" resultMap="memberResultSet">
		SELECT 
				MEMBER_NO,
				EMAIL,
				MEMBER_PWD,
				NICKNAME,
				MEMBER_NAME,
				BIRTHDAY,
				PHONE,
				BANK,
				ACCOUNT,
				ADDRESS,
				ENROLL_DATE,
				MODIFY_DATE,
				STATUS
		  FROM 
		  		MEMBER
		 WHERE
				EMAIL = #{email}
		   AND 
				STATUS = 'Y'
	</select>
	
	<!-- 회원정보 insert -->
	<insert id="joinMember" parameterType="member" >
		INSERT INTO MEMBER
					( 
					MEMBER_NO,   
				    EMAIL,    
				    MEMBER_PWD,    
				    NICKNAME,    
				    MEMBER_NAME,    
				    BIRTHDAY,    
				    PHONE,   
				    BANK,  
				    ACCOUNT,   
				    ADDRESS
				    )
				VALUES
					(
					SEQ_MNO.NEXTVAL,
					#{email},
					#{memberPwd},
					#{nickname},
					#{memberName},
					#{birthday},
					#{phone},
					#{bank},
					#{account},
					#{address}
					)
	</insert>
	
		<!-- 회원 pet 정보 insert -->
	<insert id="joinMemberPet" parameterType="pet" >
		INSERT INTO PET
					( 
					MEMBER_NO, 
					GENDER, 
					SPECIES, 
					PET_NAME, 
					AGE,
					WEIGHT
				    )
				VALUES
					(
					(SELECT NVL(MAX(MEMBER_NO), 0) FROM MEMBER),
					#{gender},
					#{species},
					#{petName},
					#{age},
					#{weight}
					)
	</insert>
	
		
		<!-- 회원 사진 정보 insert -->
	<insert id="joinMemberAtt" parameterType="att" >
		INSERT INTO ATTACHMENT
					( 
					FILE_NO,
					FILE_CATEGORY,
					REF_NO,
					ORIGIN_NAME,
					CHANGE_NAME,
					FILE_PATH

				    )
				VALUES
					(
					SEQ_FNO.NEXTVAL,
					#{fileCategory},
					(SELECT NVL(MAX(MEMBER_NO), 0) FROM MEMBER),
					#{originName},
					#{changeName},
					#{filePath}
					)
	</insert>

	<!-- 회원정보 수정용 쿼리 -->


	<update id="updateMember" parameterType="member">
		update
				member
		  set
		  		user_name = #{userName},
		  		email = #{email},
		  		age = #{age},
		  		phone=#{phone},
		  		address = #{address},
		  		gender = #{gender},
		  		modify_date = sysdate
		 where
		 		user_id = #{userId}
		  			
		
		
	</update>
	
	<!-- 회원 탈퇴용 쿼리 -->
	<update id="deleteMember" parameterType="string">
		update 
				member
		set 
				status = 'N'
		where 
				user_id = #{userId}
	</update>
	
	<!-- 이메일 중복 체크용 쿼리 -->
	
	<select id="emailCheck" resultType="_int">
	select 
			count(*)
	  from 
			member
	 where 
			email = #{checkEmail}
	</select>
	
	
	<!-- 닉네임 중복 체크용 쿼리 -->
	
	<select id="nicknameCkeck" resultType="_int">
	select 
			count(*)
	  from 
			member
	 where 
			nickname = #{nickname}
	</select>
	
	<!-- 이메일 찾기 -->
	
	<select id="findEmail" parameterType="string" resultType="string">
		select 
				email
		  from 
		  		member
		  where 
		 		nickname = #{nickname} 
		   and 
		  		status = 'Y' 
		  
	</select>

</mapper>  
