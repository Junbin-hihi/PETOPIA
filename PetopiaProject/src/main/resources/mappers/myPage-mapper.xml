<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="myPageMapper">

	<resultMap id="boardResultSet" type="board">
		<result column="board_no"	property="boardNo" />
		<result column="member_no" 	property="memberNo" />
		<result column="board_title" 	property="boardTitle" />
		<result column="board_content" 	property="boardContent" />
		<result column="create_date" 	property="createDate" />
		<result column="modify_date" 	property="modifyDate" />
		<result column="status" 	property="status" />
		<result column="category" 	property="category" />
		<result column="board_like" 	property="boardLike" />
		<result column="member_no" 	property="memberNo" />
		<result column="qna_yn" 	property="qnaYN" />
	</resultMap>
	
	<resultMap id="petResultSet" type="pet">
		<result column="MEMBER_NO" property="memberNo"/>
		<result column="GENDER" property="gender"/>
		<result column="SPECIES" property="species"/>
		<result column="PET_NAME" property="petName"/>
		<result column="AGE" property="age"/>
		<result column="WEIGHT" property="weight"/>
	</resultMap>
	
	<resultMap id="replyResultSet" type="reply">
		<result column="reply_no" 	property="replyNo" />
		<result column="board_no"	property="boardNo" />
		<result column="member_no" 	property="memberNo" />
		<result column="nickname" 	property="nickname" />
		<result column="reply_content" 	property="replyContent" />
		<result column="create_date" 	property="createDate" />
		<result column="category" 	property="category" />
		<result column="board_title" 	property="boardTitle" />
	</resultMap>
	
	<resultMap id="alramResultSet" type="alram">
		<result column="column_all"	property="columnAll" />
		<result column="date_all"	property="dateAll" />
		<result column="category"	property="category" />
		<result column="board_title"	property="boardTitle" />
		<result column="nickname"	property="nickname" />
		<result column="reply_content"	property="replyContent" />
		<result column="qna_yn" 	property="qnaYn" />
		<result column="coupon_name"	property="couponName" />
	</resultMap>
	
	<resultMap id="productReceiptResultSet" type="productReceipt">
		<result column="SHIPPING_STATUS"	property="shippingStatus" />
		<result column="RECEIPT_NO"	property="receiptNo" />
		<result column="MEMBER_NO"	property="memberNo" />
		<result column="COUPON_NO"	property="couponNo" />
		<result column="POINT"	property="point" />
		<result column="SHIPPING_NO"	property="shippingNo" />
		<result column="PRODUCT_TITLE"	property="productTitle" />
		<result column="FILE_PATH"	property="filePath" />
		<result column="RESULT_PRICE"	property="resultPrice" />
	</resultMap>
	
	<resultMap type="coupon" id="couponResultSet">
		<result column="COUPON_NO"   property="couponNo"/>
		<result column="COUPON_NAME" property="couponName"/>
		<result column="COUPON_TYPE" property="couponType"/>
		<result column="DISCOUNT" 	 property="discount"/>
		<result column="START_DATE"  property="startDate"/>
		<result column="END_DATE" 	 property="endDate"/>
		<result column="MAX_PRICE"   property="maxPrice"/>
		<result column="MIN_PRICE"   property="minPrice"/>
		<result column="MEMBER_NO"   property="memberNo"/>
		<result column="MEMBER_COUPON_STATUS"  property="memberCouponStatus"/>
	</resultMap>
	
	<resultMap type="petpay" id="petpayResultSet">
		<result column="PETPAY_NO"   property="petpayNo"/>
		<result column="PETPAY_AMOUNT" property="petpayAmount"/>
		<result column="PETPAY_DATE" property="petpayDate"/>
		<result column="PETPAY_STATUS" 	 property="petpayStatus"/>
		<result column="MEMBER_NO"  property="memberNo"/>
		<result column="ACCOUNT"  property="account"/>
	</resultMap>
	
	<resultMap type="point" id="pointResultSet">
		<result column="POINT_NO"   property="pointNo"/>
		<result column="POINT_AMOUNT" property="pointAmount"/>
		<result column="POINT_DATE" property="pointDate"/>
		<result column="POINT_STATUS" 	 property="pointStatus"/>
		<result column="MEMBER_NO"  property="memberNo"/>
	</resultMap>
	
	<resultMap type="allReviews" id="allReviewsResultMap">
		<result column="MEMBER_NO"   property="memberNo"/>
		<result column="TITLE"  property="title"/>
		<result column="RECEIPT_NO"  property="receiptNo"/>
		<result column="RECEIPT_DATE"  property="receiptDate"/>
		<result column="RESERVATION_NO"  property="reservationNo"/>
		<result column="REVIEW_PRODUCT_NO"  property="reviewProductNo"/>
		<result column="PRODUCT_NO"  property="productNo"/>
		<result column="REVIEW_NO"  property="reviewNo"/>
		<result column="SHIPPING_STATUS"  property="shippingStatus"/>
		<result column="CHECK_IN_OUT" property="checkInOut"/>
		<result column="FINAL_PRICE" property="finalPrice"/>
	</resultMap>
	
	<select id="myBoardList" parameterType="_int" resultMap="boardResultSet">
		select
		       board_title,
		       board_content,
		       create_date,
		       category
		  from 
		       board b
		  join
		       member m on(m.member_no = b.member_no)
		 where 
		       m.member_no = #{ memberNo }
		   and
		       b.status = 'Y'
		 order
		    by create_date desc
	</select>
	
	<select id="myReplyList" parameterType="_int" resultMap="replyResultSet">
		select
		       b.board_title,
		       r.reply_content,
		       r.create_date,
		       b.category
		  from 
		       board b
		  join
		       member m on(m.member_no = b.member_no)
		  join
		       reply r on(b.board_no = r.board_no)
		 where 
		       r.member_no = #{ memberNo }
		   and
		       b.status = 'Y'
		 order
		    by r.create_date desc
	</select>
	
	
	
	<select id="alramList" parameterType="_int" resultMap="alramResultSet">
		select column_all, date_all, category, board_title, nickname, reply_content
		  from 
		  (
		    select qna_yn as column_all, create_date as date_all, null as category, null as board_title, null as nickname, null as reply_content
		      from board
		     where category = 'QNA'
		       and qna_yn = 'Y'
		       and member_no = #{ memberNo }
		       
		    union all
		    
		    select CASE WHEN coupon_name = 'VIP 쿠폰' THEN 'VIP'
		                WHEN coupon_name = 'SILVER 쿠폰' THEN 'SILVER'
		                WHEN coupon_name = 'GOLD 쿠폰' THEN 'GOLD'
		                ELSE '이벤트'
		            END AS column_all, start_date date_all, null as category, null as board_title, null as nickname, null as reply_content
		      from coupon c
		      join member_coupon mc on(mc.coupon_no = c.coupon_no)
		     where member_no = #{ memberNo }
		       and member_coupon_status = 'Y'
		       
		    union all
		    
		    select s.shipping_status as column_all, s.shipping_date as date_all, null as category, null as board_title, null as nickname, null as reply_content
		     from product_receipt p
		     join shipping s on(s.shipping_no = p.receipt_no)
		     where member_no =#{ memberNo }
		     
		    union all
		    
		    select null as column_all, b.create_date as date_all, b.category as category, b.board_title as board_title, r.nickname as nickname, r.reply_content as reply_content
		      from member m
		      left join board b on(m.member_no = b.member_no)
		      left join reply r on(r.board_no = b.board_no)
		     where b.member_no = #{ memberNo }
		       and r.member_no != #{ memberNo }
		    )
		 order by date_all desc
	</select>
	
	<select id="alramShippingList" parameterType="_int" resultMap="productReceiptResultSet">
		select shipping_status
		  from product_receipt p
		  join shipping s on(s.shipping_no = p.shipping_no)
		   and member_no = #{ memberNo }
		 order by p.receipt_date desc
	</select>
	
	<select id="alramReplyList" parameterType="_int" resultMap="alramResultSet">
		select null as column_all, b.create_date as date_all, b.category as category, b.board_title as board_title, r.nickname as nickname, r.reply_content as reply_content
	      from member m
	      left join board b on(m.member_no = b.member_no)
	      left join reply r on(r.board_no = b.board_no)
	     where b.member_no = #{ memberNo }
	       and r.member_no != #{ memberNo }
	     order by b.create_date desc
	</select>
	
	<select id="alramNoticeList" parameterType="_int" resultMap="alramResultSet">
		select column_all, date_all
		  from
		  	   (
				select qna_yn as column_all, create_date as date_all
				  from board
				 where category = 'QNA'
				   and qna_yn = 'Y'
				   and member_no = #{ memberNo }
				union all
				select CASE WHEN coupon_name = 'VIP 쿠폰' THEN 'VIP'
				            WHEN coupon_name = 'SILVER 쿠폰' THEN 'SILVER'
				            WHEN coupon_name = 'GOLD 쿠폰' THEN 'GOLD'
				            ELSE '이벤트'
				        END AS column_all, start_date as date_all
				  from coupon c
				  join member_coupon mc on(mc.coupon_no = c.coupon_no)
				 where member_no = #{ memberNo }
				   and member_coupon_status = 'Y'
				)
		  order by date_all desc
	</select>
	
	<select id="selectPet" parameterType="int" resultMap="petResultSet">
		SELECT
				MEMBER_NO,
				GENDER,
				SPECIES,
				PET_NAME,
				AGE,
				WEIGHT
		  FROM
		  		PET
		 WHERE
		 		MEMBER_NO = #{memberNo}
	</select>
	
	
	<!-- 예약결제 페이지에서 필요한 회원 쿠폰 정보  SELECT문 시작 -->
	
	<!-- 회원이 보유하고 있는 쿠폰 개수  -->
	<select id="selectMemberCouponCount" parameterType="_int" resultType="_int">
		SELECT COUNT(*) 
		FROM MEMBER_COUPON 
		JOIN COUPON ON (MEMBER_COUPON.COUPON_NO = COUPON.COUPON_NO)
		WHERE MEMBER_NO = #{memberNo}
		AND MEMBER_COUPON_STATUS = 'Y'
		AND SYSDATE BETWEEN START_DATE AND END_DATE
	</select>
	
	<!--  회원이 보유하고 있는 쿠폰  List  -->
	<select id="selectMemberCouponList" parameterType="_int" resultMap="couponResultSet">
		SELECT 
				MEMBER_COUPON.COUPON_NO,
				COUPON.COUPON_NAME,
				COUPON.COUPON_TYPE,
				COUPON.DISCOUNT,
				COUPON.START_DATE,
				COUPON.END_DATE,
				COUPON.MAX_PRICE,
				COUPON.MIN_PRICE 
		FROM MEMBER_COUPON 
		JOIN COUPON ON (MEMBER_COUPON.COUPON_NO = COUPON.COUPON_NO)
		WHERE MEMBER_NO = #{memberNo}
		AND MEMBER_COUPON_STATUS = 'Y'                  
		AND SYSDATE BETWEEN START_DATE AND END_DATE
	</select>
	
	<!-- 회원이 현재 결제에서 사용 가능한 쿠폰 개수  -->
	<select id="selectAvaMemberCouponCount" parameterType="hashmap" resultType="_int">
		SELECT COUNT(*) 
		FROM MEMBER_COUPON 
		JOIN COUPON ON (MEMBER_COUPON.COUPON_NO = COUPON.COUPON_NO)
		WHERE MEMBER_NO = #{memberNo}
		AND MEMBER_COUPON_STATUS = 'Y'
		AND SYSDATE BETWEEN START_DATE AND END_DATE
		AND COUPON.MIN_PRICE BETWEEN 0 AND #{usageFee}
	</select>
	
	<select id="selectMemberPoint" parameterType="_int" resultType="_int">
		SELECT NVL(SUM(POINT_AMOUNT),0)
		FROM POINT
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 예약결제 페이지에서 필요한 회원 쿠폰 및 적릭금 정보  SELECT문 끝 -->
	
	<!-- 마이페이지 펫페이, 포인트  -->
	<select id="selectMemberPetPay" parameterType="_int" resultType="_int">
		SELECT NVL(SUM(PETPAY_AMOUNT),0)
		FROM PETPAY
		WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<select id="selectPetPayCount" parameterType="_int" resultType="_int">
		SELECT COUNT(PETPAY_NO)
		  FROM PETPAY
		 WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<select id="selectPointCount" parameterType="_int" resultType="_int">
		SELECT COUNT(POINT_NO)
		  FROM POINT
		 WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<select id="myPetpayList" parameterType="_int" resultMap="petpayResultSet">
		SELECT PETPAY_DATE, PETPAY_STATUS , PETPAY_AMOUNT, CONCAT(BANK, ACCOUNT) AS ACCOUNT
		  FROM PETPAY
		  JOIN MEMBER USING(MEMBER_NO)
		 WHERE MEMBER_NO = #{memberNo}
	   	 ORDER BY PETPAY_DATE DESC
	</select>
	
	<select id="myPointList" parameterType="_int" resultMap="pointResultSet">
		SELECT POINT_DATE, POINT_STATUS, POINT_AMOUNT
		  FROM POINT
		 WHERE MEMBER_NO = #{memberNo}
		  ORDER BY POINT_DATE DESC
	</select>
	
	<!-- 회원 등급 조회 -->
	<select id="getMemberRating" resultType="string" parameterType="_int">
               SELECT 
		        CASE 
		        WHEN 
		        (SELECT SUM(RESULT)
		           FROM (
		                 SELECT 
		                        MEMBER_NO,
		                        RR.RESERVATION_NO,
		                        RESERVATION_FEE,
		                        
		                        CASE 
		                                WHEN RR.COUPON_NO !=0 AND C.COUPON_TYPE = 1
		                                THEN RESERVATION_FEE - C.DISCOUNT - POINT 
		                                WHEN RR.COUPON_NO !=0 AND C.COUPON_TYPE = 2
		                                THEN  RESERVATION_FEE * ((100-C.DISCOUNT)/100) - POINT
		                                ELSE  RESERVATION_FEE - POINT
		                                END RESULT ,
		                                RR.POINT,
		                                RR.COUPON_NO
		                  FROM
		                        RESERVATION R 
		                  JOIN (
		                        VIEW_RESERVATION_RECEIPT) RR ON (RR.RESERVATION_NO = R.RESERVATION_NO)
		                  LEFT JOIN COUPON C ON(C.COUPON_NO = RR.COUPON_NO)
		                 WHERE  MEMBER_NO = #{memberNo}
                           AND  TO_CHAR(RECEIPT_DATE) BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1))
                                AND TO_CHAR(TRUNC (LAST_DAY( ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1)))))
                          )
		                +
                        (SELECT SUM(RESULT_PRICE)
                          FROM (
                                SELECT
                        
                                        MEMBER_NO,
                                        CASE 
                                        WHEN PR.COUPON_NO !=0 AND C.COUPON_TYPE = 1
                                        THEN R.RESULT_PRICE - POINT - C.DISCOUNT
                                        WHEN PR.COUPON_NO !=0 AND C.COUPON_TYPE = 2
                                        THEN R.RESULT_PRICE * ((100-C.DISCOUNT)/100) - POINT
                                        ELSE  R.RESULT_PRICE - POINT
                                        END RESULT_PRICE ,
                                        PR.RECEIPT_NO
                                FROM VIEW_PRODUCT_RECEIPT PR
                                LEFT JOIN COUPON C ON(C.COUPON_NO = PR.COUPON_NO)
                                JOIN(VIEW_RESULT_PRICE) R ON (R.RECEIPT_NO = PR.RECEIPT_NO)
                                WHERE MEMBER_NO = #{memberNo}
                                AND TO_CHAR(RECEIPT_DATE) BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1))
                                    AND TO_CHAR(TRUNC (LAST_DAY( ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1)))))) > 1000000 
		            THEN 'VIP'
		            WHEN 
                        (SELECT SUM(RESULT)
                           FROM (
                                 SELECT 
                                        MEMBER_NO,
                                        RR.RESERVATION_NO,
                                        RESERVATION_FEE,
                                        
                                        CASE 
                                                WHEN RR.COUPON_NO !=0 AND C.COUPON_TYPE = 1
                                                THEN RESERVATION_FEE - C.DISCOUNT - POINT 
                                                WHEN RR.COUPON_NO !=0 AND C.COUPON_TYPE = 2
                                                THEN  RESERVATION_FEE * ((100-C.DISCOUNT)/100) - POINT
                                                ELSE  RESERVATION_FEE - POINT
                                                END RESULT ,
                                                RR.POINT,
                                                RR.COUPON_NO
                                  FROM
                                        RESERVATION R 
                                  JOIN (
                                        VIEW_RESERVATION_RECEIPT) RR ON (RR.RESERVATION_NO = R.RESERVATION_NO)
                                  LEFT JOIN COUPON C ON(C.COUPON_NO = RR.COUPON_NO)
                                 WHERE MEMBER_NO = #{memberNo}
                                   AND TO_CHAR(RECEIPT_DATE) BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1))
                                        AND TO_CHAR(TRUNC (LAST_DAY( ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1)))))
                                )
                            +
                            (SELECT SUM(RESULT_PRICE)
                              FROM (
                                    SELECT
                            
                                            MEMBER_NO,
                                            CASE 
                                            WHEN PR.COUPON_NO !=0 AND C.COUPON_TYPE = 1
                                            THEN R.RESULT_PRICE - POINT - C.DISCOUNT
                                            WHEN PR.COUPON_NO !=0 AND C.COUPON_TYPE = 2
                                            THEN R.RESULT_PRICE * ((100-C.DISCOUNT)/100) - POINT
                                            ELSE  R.RESULT_PRICE - POINT
                                            END RESULT_PRICE ,
                                            PR.RECEIPT_NO
                                    FROM VIEW_PRODUCT_RECEIPT PR
                                    LEFT JOIN COUPON C ON(C.COUPON_NO = PR.COUPON_NO)
                                    JOIN(VIEW_RESULT_PRICE) R ON (R.RECEIPT_NO = PR.RECEIPT_NO)
                                    WHERE MEMBER_NO = #{memberNo}
                                    AND TO_CHAR(RECEIPT_DATE) BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1))
                                        AND TO_CHAR(TRUNC (LAST_DAY( ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1))))) )  BETWEEN 500000 AND  1000000
                        THEN 'GOLD'
                        ELSE 'SLIVER'
                        END RATING
            	 FROM DUAL
	</select>
	<!-- 회원이 발급 가능한 쿠폰 리스트 조회 -->
	<!-- 페이징 처리를 위한 쿠폰 리스트 조히 -->
	<select id="couponListCount" resultType="_int">
		SELECT COUNT(*)
		FROM COUPON
		WHERE SYSDATE BETWEEN START_DATE AND END_DATE
	</select>
	
	<!-- 쿠폰 리스트 -->
	<select id="memberCouponList" resultMap="couponResultSet" parameterType="member">
		SELECT 
		        C.COUPON_NO,
		        MEMBER_NO,
		        COUPON_NAME,
		        COUPON_TYPE,
		        DISCOUNT,
				SUBSTR(TO_CHAR(START_DATE, 'YYYY-MM-DD'), 1, 10) START_DATE,
				SUBSTR(TO_CHAR(END_DATE, 'YYYY-MM-DD'), 1, 10) END_DATE,
		        MAX_PRICE,
		        MIN_PRICE
		  FROM 
		        COUPON C
		  LEFT 
		  JOIN MEMBER_COUPON MC ON (MC.COUPON_NO = C.COUPON_NO)
		 WHERE 
		        SYSDATE BETWEEN START_DATE AND END_DATE
		<choose>
			<when test="rating == 'VIP'">
				 AND 'VIP' = 'VIP'
		 		 AND (COUPON_NAME NOT LIKE '%'||'SILVER'||'%'  AND 
		       		  COUPON_NAME NOT LIKE '%'||'GOLD'||'%' )
			</when>
			<when test="rating == 'GOLD'">
				 AND 'GOLD' = 'GOLD'
	   			 AND (COUPON_NAME NOT LIKE '%'||'SILVER'||'%'  AND 
	         			COUPON_NAME NOT LIKE '%'||'VIP'||'%' )
			</when>
			<otherwise>
				  AND 'SILVER' = 'SILVER'
   				  AND (COUPON_NAME NOT LIKE '%'||'GOLD'||'%'  AND 
        			   COUPON_NAME NOT LIKE '%'||'VIP'||'%' )
        		 
			</otherwise>
		</choose>
		AND MEMBER_NO IS NULL OR MEMBER_NO = #{memberNo}
  		AND MEMBER_COUPON_STATUS = 'Y'
		 
	</select>
	<!-- 사용상태에 따른  쿠폰리스트 -->
	<select id="selectAvailableCoupon" resultMap="couponResultSet" parameterType="_int">
		SELECT 
		        C.COUPON_NO,
		        COUPON_NAME,
		        COUPON_TYPE,
		        DISCOUNT,
				SUBSTR(TO_CHAR(START_DATE, 'YYYY-MM-DD'), 1, 10) START_DATE,
				SUBSTR(TO_CHAR(END_DATE, 'YYYY-MM-DD'), 1, 10) END_DATE,
		        MAX_PRICE,
		        MIN_PRICE,
				CASE WHEN (MEMBER_COUPON_STATUS = 'U')
				     THEN '사용완료'
				     WHEN  (MEMBER_COUPON_STATUS = 'Y')
				     THEN '사용가능'
				     WHEN ( TO_CHAR(END_DATE) > TO_CHAR(SYSDATE))
				     THEN '기간 만료'
				     END AS MEMBER_COUPON_STATUS
		  FROM
		        COUPON C
		  JOIN 
		        MEMBER_COUPON  MC ON (C.COUPON_NO = MC.COUPON_NO )
		 WHERE 
		        MEMBER_NO = #{ memberNo}
		  ORDER
		  	 BY  END_DATE DESC
		  	 	
	</select>
	
	<insert id="insertCouponToMember" parameterType="coupon">
		INSERT INTO MEMBER_COUPON
		(MEMBER_NO,COUPON_NO)
		VALUES(#{memberNo}, #{couponNo})
	</insert>
	
	
	
	<!-- 펫페이, 포인트 -->
	<select id="petpayStatusList" parameterType="hashmap" resultMap="petpayResultSet">
		SELECT PETPAY_DATE, PETPAY_STATUS , PETPAY_AMOUNT, CONCAT(BANK, ACCOUNT) AS ACCOUNT
		  FROM PETPAY
		  JOIN MEMBER USING(MEMBER_NO)
		 WHERE MEMBER_NO = #{memberNo}
		 <choose>
	   	  	<when test="status == 'PLUS'">
	   	  		AND PETPAY_STATUS = 'P'
	   	  		ORDER BY PETPAY_DATE DESC
	   	  	</when>
	   	  	<when test="status == 'MINUS'">
	   	  		AND PETPAY_STATUS = 'M'
	   	  		ORDER BY PETPAY_DATE DESC
	   	  	</when>
	   	  	<otherwise>
	   	  	   ORDER BY PETPAY_DATE DESC
	   	  	</otherwise>
	   	 </choose>
	</select>
	
	<select id="pointStatusList" parameterType="hashmap" resultMap="pointResultSet">
		SELECT POINT_DATE, POINT_STATUS, POINT_AMOUNT
		  FROM POINT
		 WHERE MEMBER_NO = #{memberNo}
		 <choose>
	   	  	<when test="status == 'PLUS'">
	   	  		AND POINT_STATUS = 'P'
	   	  		ORDER BY POINT_DATE DESC
	   	  	</when>
	   	  	<when test="status == 'MINUS'">
	   	  		AND POINT_STATUS = 'M'
	   	  		ORDER BY POINT_DATE DESC
	   	  	</when>
	   	  	<otherwise>
	   	  	   ORDER BY POINT_DATE DESC
	   	  	</otherwise>
	   	 </choose>
	</select>
	
	<!-- 펫페이 충전 -->
	<insert id="insertChargePetpay" parameterType="Petpay">
	INSERT
	  INTO PETPAY
	       (
	       PETPAY_NO,
	       PETPAY_AMOUNT,
	       PETPAY_DATE,
	       PETPAY_STATUS,
	       MEMBER_NO      
	       )
	VALUES (
	       SEQ_PETPAY_NO.NEXTVAL,
	       #{petpayAmount},
	       SYSDATE,
	       'P',
	       #{memberNo}
	       )
	
	</insert>
	
	<!-- 펫페이 인출 -->
	<insert id="insertWithdrawPetpay" parameterType="_int">
	INSERT
	  INTO PETPAY
	       (
	       PETPAY_NO,
	       PETPAY_AMOUNT,
	       PETPAY_DATE,
	       PETPAY_STATUS,
	       MEMBER_NO      
	       )
	VALUES (
	       SEQ_PETPAY_NO.NEXTVAL,
	       -#{petpayAmount},
	       SYSDATE,
	       'M',
	       #{memberNo}
	       )
	
	</insert>
	
	<select id="myReviewList" parameterType="_int" resultMap="allReviewsResultMap">
	SELECT MEMBER_NO, TITLE, RECEIPT_NO, RECEIPT_DATE, REVIEW_PRODUCT_NO, PRODUCT_NO, REVIEW_NO, SHIPPING_STATUS, CEHCK_IN_OUT, FINAL_PRICE
    FROM
    (
	SELECT
	       MEMBER_NO,
	       P.PRODUCT_TITLE||' ' || PB.AMOUNT || '개' AS TITLE ,
	       PR.RECEIPT_NO,
	       PR.RECEIPT_DATE,
	       PRV.PRODUCT_NO AS REVIEW_PRODUCT_NO,
	       P.PRODUCT_NO,
	       CASE WHEN (PRV.PRODUCT_NO = P.PRODUCT_NO AND PRV.RECEIPT_NO = PR.RECEIPT_NO)THEN PRV.PRODUCT_REVIEW_NO
	       END AS REVIEW_NO,
	       S.SHIPPING_STATUS,
	       NULL AS CEHCK_IN_OUT,
	       CASE 
	       WHEN PR.COUPON_NO !=0 AND C.COUPON_TYPE = 1
	       THEN R.RESULT_PRICE - POINT - C.DISCOUNT
	       WHEN PR.COUPON_NO !=0 AND C.COUPON_TYPE = 2
	       THEN R.RESULT_PRICE * ((100-C.DISCOUNT)/100) - POINT
	       ELSE  R.RESULT_PRICE - POINT
	       END FINAL_PRICE
	  FROM 
	       VIEW_PRODUCT_RECEIPT PR
	  JOIN 
	       PRODUCT_BRIDGE PB ON (PB.RECEIPT_NO = PR.RECEIPT_NO)
	  JOIN 
	       PRODUCT P ON(PB.PRODUCT_NO = P.PRODUCT_NO)
	  LEFT JOIN
	       PRODUCT_REVIEW PRV ON (PRV.RECEIPT_NO= PR.RECEIPT_NO)
	  LEFT JOIN 
	       COUPON C ON(C.COUPON_NO = PR.COUPON_NO)
	  JOIN
	       VIEW_RESULT_PRICE R ON (R.RECEIPT_NO = PB.RECEIPT_NO)
	  JOIN 
	       SHIPPING S ON(S.SHIPPING_NO = PR.RECEIPT_NO)
	  LEFT JOIN     
	  
	       ATTACHMENT A ON (A.REF_NO = P.PRODUCT_NO)        
	 WHERE 
	       MEMBER_NO = #{memberNo}
	   AND
	       SHIPPING_STATUS = '배송완료'
      
	UNION ALL
	
    SELECT 
	        MEMBER_NO,
	        CASE 
	        WHEN PET_STORE = 1 THEN '호텔'
	        WHEN PET_STORE = 2 THEN '유치원'
	        WHEN PET_STORE = 3 THEN '미용, 선생님 : ' || EMPLOYEE
	        WHEN PET_STORE = 4 THEN '훈련, 선생님 : ' || EMPLOYEE
	        END  TITLE,
            R.RESERVATION_NO RECEIPT_NO,
            RR.RECEIPT_DATE,
            NULL AS REVIEW_PRODUCT_NO,
            NULL AS PRODUCT_NO,
            REVIEW_NO,
            NULL AS SHIPPING_STATUS,
            CONCAT(CONCAT(CHECK_IN, ' ~ '), CHECK_OUT) AS CHECK_IN_OUT,
            CASE 
	        WHEN RR.COUPON_NO !=0 AND C.COUPON_TYPE = 1
	        THEN RESERVATION_FEE - C.DISCOUNT - POINT 
	        WHEN RR.COUPON_NO !=0 AND C.COUPON_TYPE = 2
	        THEN  RESERVATION_FEE * ((100-C.DISCOUNT)/100) - POINT
	        ELSE  RESERVATION_FEE - POINT
	        END FINAL_PRICE
	  FROM
	        RESERVATION R 
	  JOIN (
	        SELECT
	                RESERVATION_NO,
	                RECEIPT_DATE,
	                NVL(COUPON_NO,0) COUPON_NO,
	                NVL(POINT,0) POINT
	          FROM 
	                RESERVATION_RECEIPT
	          WHERE 
	                RECEIPT_STATUS='Y') RR ON (RR.RESERVATION_NO = R.RESERVATION_NO)
	  LEFT 
	       JOIN COUPON C ON(C.COUPON_NO = RR.COUPON_NO)
	  LEFT 
	       JOIN PET_STORE_REVIEW PSR ON(PSR.RESERVATION_NO = RR.RESERVATION_NO)
	 WHERE
	        MEMBER_NO = #{memberNo}
	 )
	 ORDER
	    BY RECEIPT_DATE DESC
	</select>
	
	<select id="productReviewForm" parameterType="allReviews" resultType="allReviews" resultMap="allReviewsResultMap">
	SELECT
           PR.RECEIPT_DATE,
           P.PRODUCT_TITLE||' ' || PB.AMOUNT || '개' AS TITLE,
           PR.RECEIPT_NO,
           P.PRODUCT_NO,
           MEMBER_NO
     FROM 
           PRODUCT_RECEIPT PR
      JOIN 
     	   PRODUCT_BRIDGE PB ON (PB.RECEIPT_NO = PR.RECEIPT_NO)
      JOIN 
      	   PRODUCT P ON(PB.PRODUCT_NO = P.PRODUCT_NO)
	 WHERE 
	       MEMBER_NO = #{memberNo}
       AND
           P.PRODUCT_NO = #{productNo}
       AND 
           PR.RECEIPT_NO = #{receiptNo}
	</select>
	
	<select id="reservationReviewForm" parameterType="allReviews" resultMap="allReviewsResultMap">
	SELECT
	        CASE 
	        WHEN PET_STORE = 1 THEN '호텔'
	        WHEN PET_STORE = 2 THEN '유치원'
	        WHEN PET_STORE = 3 THEN '미용'
	        WHEN PET_STORE = 4 THEN '훈련'
	        END  TITLE,
	        RECEIPT_DATE,
            RR.RESERVATION_NO
	  FROM
	        RESERVATION R 
      JOIN 
           RESERVATION_RECEIPT RR ON (RR.RESERVATION_NO = R.RESERVATION_NO)
	 WHERE
	        MEMBER_NO = #{memberNo}
       AND
            RR.RESERVATION_NO = #{reservationNo}
	</select>
	
	<insert id="insertReview" parameterType="allReviews">
	INSERT 
	  INTO PRODUCT_REVIEW
	      (
	       PRODUCT_REVIEW_NO, 
	       RECEIPT_NO, 
	       PRODUCT_NO, 
	       REVIEW_CONTENT, 
	       CREATE_DATE, 
	       RATING
	      ) 
    VALUES 
          (
           SEQ_PRODUCT_REVIEW_NO.NEXTVAL, 
           #{receiptNo}, 
           #{productNo}, 
           #{reviewContent}, 
           SYSDATE,
           #{rating}
           )
	 </insert>
	 
	 <insert id="insertReview2" parameterType="allReviews">
	 INSERT
	   INTO
	       ATTACHMENT
	       (
	       FILE_NO,
	       FILE_CATEGORY,
	       REF_NO,
	       FILE_LEVEL,
	       ORIGIN_NAME,
	       CHANGE_NAME,
	       FILE_PATH,
	       FILE_STATUS
	       )
	 VALUES
	       (
	       SEQ_FNO.NEXTVAL,
	       5,
	       SEQ_PRODUCT_REVIEW_NO.CURRVAL,
	       0,
	       #{originName},
	       #{changeName},
	       #{filePath},
	       'Y'
	       )
	 </insert>
	
	<select id="orderListCount" resultType="_int" parameterType="_int">
		SELECT
		        COUNT(*)
	      FROM
	            PRODUCT_RECEIPT
	     WHERE 
		        MEMBER_NO = #{memberNo}
	</select>
	<!--  회원 주문 배송 내역 조회 -->
	<select id="selectOrderList" resultMap="productReceiptResultSet" parameterType="_int">
		SELECT 
		        RECEIPT_NO, 
		        LISTAGG(PRODUCT_TITLE, ',') WITHIN GROUP(ORDER BY RECEIPT_NO) PRODUCT_TITLE,
		        MEMBER_NO,
		        SHIPPING_STATUS,
		        RESULT_PRICE
		            
		 FROM ( SELECT
		                MEMBER_NO,
		                P.PRODUCT_TITLE||' ' || PB.AMOUNT || '개'  PRODUCT_TITLE ,
				        S.SHIPPING_STATUS,
		                PR.RECEIPT_NO,
		                CASE 
		                WHEN PR.COUPON_NO !=0 AND C.COUPON_TYPE = 1
		                THEN R.RESULT_PRICE - POINT - C.DISCOUNT
		                WHEN PR.COUPON_NO !=0 AND C.COUPON_TYPE = 2
		                THEN R.RESULT_PRICE * ((100-C.DISCOUNT)/100) - POINT
		                ELSE  R.RESULT_PRICE - POINT
		                END RESULT_PRICE
		        FROM 
		                VIEW_PRODUCT_RECEIPT PR
		        JOIN 
		                PRODUCT_BRIDGE PB ON (PB.RECEIPT_NO = PR.RECEIPT_NO)
		        JOIN 
		                PRODUCT P ON(PB.PRODUCT_NO = P.PRODUCT_NO)
		        LEFT JOIN 
		                COUPON C ON(C.COUPON_NO = PR.COUPON_NO)
		        JOIN
		                VIEW_RESULT_PRICE R ON (R.RECEIPT_NO = PB.RECEIPT_NO)
		        JOIN 
		                SHIPPING S ON(S.SHIPPING_NO = PR.RECEIPT_NO)
		        LEFT JOIN     
		                ATTACHMENT A ON (A.REF_NO = P.PRODUCT_NO)        
			   WHERE 
		                MEMBER_NO = #{memberNo}
		       ORDER
		  		  BY
		   				RECEIPT_DATE DESC) 
		GROUP 
		    BY
		        RECEIPT_NO, MEMBER_NO, SHIPPING_STATUS, RESULT_PRICE

	</select>
	
	<!-- 회원 배송 상태 변경 update -->
	<update id="updateShippingStatus" parameterType="_int">
		UPDATE 
		        SHIPPING
		    SET 
		        SHIPPING_STATUS = '배송완료'
		  WHERE
		        SHIPPING_NO = #{ receiptNo }
		   		
			
	</update>

</mapper>